import jsPDF from 'jspdf';

export interface CartItemForPDF {
  id: string;
  name: string;
  description?: string;
  type: 'meal' | 'packet';
  quantity: number;
  basePrice: number;
  markupPct: number;
  netPrice: number;
  grossPrice: number;
}

export interface CartSummaryForPDF {
  nettoTotal: number;
  avgMarkupPct: number;
  bruttoTotal: number;
  itemCount: number;
}

export function generateCartPDF(
  items: CartItemForPDF[],
  summary: CartSummaryForPDF,
  userEmail?: string
): void {
  // Create new PDF document
  const doc = new jsPDF();
  
  // Set up fonts and styling
  const pageWidth = doc.internal.pageSize.width;
  const margin = 20;
  const contentWidth = pageWidth - 2 * margin;
  let yPosition = margin;

  // Header
  doc.setFontSize(20);
  doc.setFont('helvetica', 'bold');
  doc.text('Costify Pro - Quote', margin, yPosition);
  
  yPosition += 10;
  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');
  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, margin, yPosition);
  
  if (userEmail) {
    yPosition += 6;
    doc.text(`Prepared by: ${userEmail}`, margin, yPosition);
  }
  
  yPosition += 15;

  // Company branding section
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('Quote Details', margin, yPosition);
  
  yPosition += 15;

  // Table header
  doc.setFontSize(10);
  doc.setFont('helvetica', 'bold');
  
  const col1 = margin;
  const col2 = margin + 80;
  const col3 = margin + 110;
  const col4 = margin + 130;
  const col5 = margin + 160;
  
  doc.text('Item', col1, yPosition);
  doc.text('Type', col2, yPosition);
  doc.text('Qty', col3, yPosition);
  doc.text('Markup', col4, yPosition);
  doc.text('Total', col5, yPosition);
  
  yPosition += 5;
  
  // Table underline
  doc.line(margin, yPosition, pageWidth - margin, yPosition);
  yPosition += 10;

  // Table rows
  doc.setFont('helvetica', 'normal');
  
  items.forEach((item) => {
    // Check if we need a new page
    if (yPosition > 250) {
      doc.addPage();
      yPosition = margin;
    }
    
    // Truncate long names if needed
    const itemName = item.name.length > 35 ? item.name.substring(0, 32) + '...' : item.name;
    
    doc.text(itemName, col1, yPosition);
    doc.text(item.type.charAt(0).toUpperCase() + item.type.slice(1), col2, yPosition);
    doc.text(item.quantity.toString(), col3, yPosition);
    doc.text(`${item.markupPct}%`, col4, yPosition);
    doc.text(`€${item.grossPrice.toFixed(2)}`, col5, yPosition);
    
    yPosition += 8;
  });

  yPosition += 10;

  // Summary section
  doc.line(margin, yPosition, pageWidth - margin, yPosition);
  yPosition += 10;
  
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(12);
  doc.text('Summary', margin, yPosition);
  
  yPosition += 10;
  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  
  doc.text(`Total Items: ${summary.itemCount}`, margin, yPosition);
  yPosition += 6;
  doc.text(`Net Total: €${summary.nettoTotal.toFixed(2)}`, margin, yPosition);
  yPosition += 6;
  doc.text(`Average Markup: ${summary.avgMarkupPct.toFixed(1)}%`, margin, yPosition);
  yPosition += 6;
  
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(12);
  doc.text(`Gross Total: €${summary.bruttoTotal.toFixed(2)}`, margin, yPosition);

  // Footer
  yPosition = doc.internal.pageSize.height - 30;
  doc.setFont('helvetica', 'normal');
  doc.setFontSize(8);
  doc.text('Generated by Costify Pro - Food Costing & Catering Management', margin, yPosition);
  doc.text('This quote is valid for 30 days from the date of generation.', margin, yPosition + 6);

  // Generate filename with timestamp
  const timestamp = new Date().toISOString().split('T')[0];
  const filename = `costify-quote-${timestamp}.pdf`;
  
  // Save the PDF
  doc.save(filename);
} 